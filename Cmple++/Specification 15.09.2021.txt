1. Input
Input is a set of set of files with name <T>.cpp , accepted by the following regex:
\s*(<Var>\s+<VarName>;\s+|<Var>\s+<VarName>\s*=\s*.*;\s+)*Create{.*}\s*Destroy{.*}\s*Update{.*}\s*Draw3D{.*}\s*Draw2D{.*}\s*
Example of file:
________________________________
int a = 5;
string s;
B aba;
Create {
	a++;
}
Destroy {

}
Update {
	s = "abbb";
}
Draw3D {

}
Draw2D {

}
________________________________

2. Replacements.
Standart header file:
________________________________
class class_name {
public:
	void Create();
	void Destroy();
	void Update();
	void Draw3D();
	void Draw2D();
}
________________________________

Source file with substitutions into functions:
________________________________
#include "class_name.h'

void class_name::Create() {
	.*
}

void class_name::Destroy() {
	.*
}

void class_name::Update() {
	.*
}

void class_name::Draw3D() {
	.*
}

void class_name::Draw2D() {
	.*
}
________________________________

Assume T_1, ... , T_n - names of files/classes
Then replace <T_i> to <T_i>_typename;
// Done : Difficult: for all variables of type <T_i> replace <t_j> to <T_i>_container[<t_j>]
For all variables of type <T_i> replace <t_j> to <T_i>_container[<t_j>]

3. Additions into internal file.
Assume T_1, ... , T_n - names of files/classes
The created internal file contains following statements:

using <T_i>_typename = int;
map <int, <T_i>> <T_i>_container;
int <T_i>_objects_number = 0;
int create_object_<T_i>(){
	<T_i>_container[<T_i>_objects_number] = <T_i>();
	<T_i>_container[<T_i>_opjects_number].Create();
	return <T_i>_object_number++;
}
void destroy_object_<T_i>(int num){
	<T_i>_container[num].Destroy();
	<T_i>_container.erase(num);
}
...
// Update call
for(pair<int,<T_i>> i : <T_i> container){
	if(<T_i>_existance[i.first])
		<T_i>_container.Update();
}
...
...
// Draw call
for(pair<int,<T_i>> i : <T_i> container){
	if(<T_i>_existance[i.first])
		<T_i>_container.Draw();
}
...
...
// DrawGUI call
for(pair<int,<T_i>> i : <T_i> container){
	if(<T_i>_existance[i.first])
		<T_i>_container.DrawGUI();
}
...

4. Accepted commands
<T_i> create_object_<T_i>()
void destroy_object_<T_i>()

Input functions (to be updated later):
bool mouse(MB_...) : returns if mouse button is pressed
bool keyboard(KB_...) : returns if keyboard key is pressed
bool mouse_pressed(MB_...) : returns if mouse button was pressed in this iteration
bool keyboard_pressed(KB_...) : returns if keyboard button was pressed in this iteration
bool mouse_released(MB_...) : returns if mouse button was released in this iteration
bool keyboard_released(KB_...) : returns if keyboard key was released in this iteration
MB_LEFT
MB_RIGHT
MB_MIDDLE
KB_LEFT
KB_RIGHT
KB_UP
KB_DOWN
KB_ENTER
KB_BACKSPACE
KB_SPACE
KB_CTRL
KB_ALT
KB_ESCAPE

*Draw functions: (to be described later)
void draw_model(model_type, ...)
void set_camera_position(...)

*DrawGUI functions: (to be described later)
void draw_sprite(sprite_type, ...)
void draw_text(font_type, ...)

5. Starting settings (to be described later)
Resolution/Fullscreen
Timer
Initial class
Models to load
Sprites to load
Views and viewports (probably will not be added)
